#!/bin/bash
THIS_SCRIPT_VERSION=1.6
SERVER_DOMAIN="apt.walnutpi.com"
THIS_SCRIPT_URL="http://${SERVER_DOMAIN}//debian/wpi-update.gz"
THIS_SCRIPT_SAVE="/tmp/wpi-update.gz"
THIS_SCRIPT_FILE="/tmp/wpi-update"

SOURCE_STR_WALNUTPI="deb [trusted=yes] http://${SERVER_DOMAIN}//debian/ bookworm main"
SOURCE_STR_TSINGHUA="deb http://mirrors.tuna.tsinghua.edu.cn/debian bookworm main"
if [ -f /proc/device-tree/model ];then
    BOARD_MODEL=$(tr -d '\0' < /proc/device-tree/model)
elif [ -f /etc/model ];then
    BOARD_MODEL=$(tr -d '\0' < /etc/model)
elif [ -f /tmp/walnutpi-board_model ];then
    BOARD_MODEL=$(tr -d '\0' < /tmp/walnutpi-board_model)

fi

# /tmp/walnutpi-board_model
PATCH_LIST_URL="http://${SERVER_DOMAIN}/debian/patch-list/${BOARD_MODEL}.gz"
TMP_SOURCE_FILE="/tmp/wpi-update-source"
TMP_SOURCE_FILE_WPI="/tmp/wpi-update-source-wpi"
LOG_URL_PREFIX="http://${SERVER_DOMAIN}/debian/release-log"
LOG_URL_CN="${LOG_URL_PREFIX}/${BOARD_MODEL}_cn.log"
LOG_URL_EN="${LOG_URL_PREFIX}/${BOARD_MODEL}_en.log"
LOG_URL=""
RELEASE_FILE="/etc/WalnutPi-release"
FILE_LOG_SAVE="/tmp/wpi-update-update.log"
FILE_PACKAGES="/tmp/wpi-update-packages.txt"

PATH_PATCH_LIST="/tmp/walnutpi-patch-list"
if [ -d $PATH_PATCH_LIST ]; then
    rm -r $PATH_PATCH_LIST
fi
mkdir -p $PATH_PATCH_LIST

[[ -f $THIS_SCRIPT_SAVE ]] && rm $THIS_SCRIPT_SAVE
[[ -f $THIS_SCRIPT_FILE ]] && rm $THIS_SCRIPT_FILE
[[ -f $TMP_SOURCE_FILE ]] && rm $TMP_SOURCE_FILE
[[ -f $TMP_SOURCE_FILE_WPI ]] && rm $TMP_SOURCE_FILE_WPI
[[ -f $FILE_LOG_SAVE ]] && rm $FILE_LOG_SAVE
[[ -f $FILE_PACKAGES ]] && rm $FILE_PACKAGES

run_as_silent() {
    $@ > /dev/null 2>&1
}

run_status() {
    local message=$1
    shift
    # set +e
    local start_time=$(date +%s)
    while true; do
        echo -e  -n "...\t$message"
        output=$("$@" 2>&1)
        exit_status=$?
        if [ $exit_status -ne 0 ]; then
            echo -e "\r\033[31m[error]\033[0m"
            echo -e $output
            exit 1
        else
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            echo -e "\r\033[32m[ok]\033[0m\t${message}"
            break
        fi
    done
    # set -e
}
echo_red() {
    echo -e "\r\033[31m$1\033[0m"
}
echo_green() {
    echo -e "\r\033[32m$1\033[0m"
}
echo_blue() {
    echo -e "\r\033[36m$1\033[0m"
}


declare -A STR_CN
declare -A STR_EN
declare -A STR_AUTO

STR_CN['sudo_warn']="\n\t请使用sudo来运行本指令\n"
STR_EN['sudo_warn']="\n\tError:  please use sudo !\n"

STR_CN['version_newest_h']="\n\t你的系统版本已经是最新的"
STR_CN['version_newest_l']="  ,无需更新\n"
STR_EN['version_newest_h']="\n\tYour system version is already up to "
STR_EN['version_newest_l']="  ,No need to update\n"

STR_CN['backup_warn']=$(cat <<- 'EOF'
\t=================================
\t||前注意备份好个人数据,以免发生意外
\t=================================
EOF
)
STR_EN['backup_warn']=$(cat <<- 'EOF'
\t========================================================
\tBe sure to back up your personal data to avoid accidents
\t========================================================
EOF
)
STR_CN['are_u_redy']="您希望继续执行吗？"
STR_EN['are_u_redy']="Do you want to continue?"

STR_CN['abort']="中止"
STR_EN['abort']="Abort"

STR_CN['install_error']="ERROR: 获取不到可更新的包"
STR_EN['install_error']="ERROR: Could not get updatable package"


if [[ $LANG ==  zh_CN* ]]; then
    LOG_URL=$LOG_URL_CN
    for key in "${!STR_CN[@]}"; do
        STR_AUTO[$key]="${STR_CN[$key]}"
    done
else
    LOG_URL=$LOG_URL_EN
    for key in "${!STR_EN[@]}"; do
        STR_AUTO[$key]="${STR_EN[$key]}"
    done
fi


if [[ $EUID -ne 0 ]]; then
    echo -e "${STR_AUTO['sudo_warn']}"
    exit 1
fi

echo -e "$SOURCE_STR_WALNUTPI \n" > $TMP_SOURCE_FILE_WPI
echo -e "$SOURCE_STR_WALNUTPI \n" > $TMP_SOURCE_FILE
echo -e "$SOURCE_STR_TSINGHUA \n" >> $TMP_SOURCE_FILE
COMMAND=$1
COMMAND_VALUE=$2


# 获取网站上存储的本脚本,进行更新
if [[ $COMMAND != "no_update" ]]; then
    if [ -f $THIS_SCRIPT_SAVE ]; then
        rm $THIS_SCRIPT_SAVE
    fi
    run_status "get updates ..."  wget -c $THIS_SCRIPT_URL -O $THIS_SCRIPT_SAVE
    run_status "unzip the file" tar -xvf $THIS_SCRIPT_SAVE -C /tmp
    NEW_SCRIPT_VERSION=$(grep -o 'THIS_SCRIPT_VERSION=[0-9.]*' $THIS_SCRIPT_FILE | cut -d '=' -f 2)

    if [[ "$NEW_SCRIPT_VERSION" > "$THIS_SCRIPT_VERSION" ]]; then
        cp $THIS_SCRIPT_FILE $0
        exec bash $0 no_update
        
    fi
fi



case $COMMAND in 
    -v)
        echo $THIS_SCRIPT_VERSION
        exit 0
        ;;
            
    -s)
        run_as_silent  wget -c $LOG_URL -O $FILE_LOG_SAVE
        NEW_VERSION=$(grep -o '\[[^]]*\] - [^ ]*' $FILE_LOG_SAVE | head -n 1 | awk '{print $3}')
        echo "$NEW_VERSION "
        exit 0
        ;;
    install)
        
        run_status "get the package info ..." apt-get update -o Dir::Etc::sourcelist="$TMP_SOURCE_FILE_WPI" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
        apt-get install -o Dir::Etc::sourcelist="$TMP_SOURCE_FILE" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" $COMMAND_VALUE
        exit 0
        ;;
esac


if [[ -f $RELEASE_FILE ]]; then
    # 从文件中获取版本号和日期
    BOARD_VER=$(grep '^version=' $RELEASE_FILE | cut -d '=' -f 2)
    BOARD_DATE=$(grep '^date=' $RELEASE_FILE | cut -d '=' -f 2)
    BOARD_OS_TYPE=$(grep '^os_type=' $RELEASE_FILE | cut -d '=' -f 2)
fi
# 获取release.log
if [ -f $FILE_LOG_SAVE ]; then
    rm $FILE_LOG_SAVE
fi
run_status "download the release log ...."  wget -c $LOG_URL -O $FILE_LOG_SAVE
NEW_VERSION=$(grep -o '\[[^]]*\] - [^ ]*' $FILE_LOG_SAVE | head -n 1 | awk '{print $3}')

# 如果release.log最新一项的日期大于本地log的
BOARD_DATE_SECONDS=$(date -d"$BOARD_DATE" +%s)
DATES_IN_LOG=$(grep -o '\[[^]]*\]' $FILE_LOG_SAVE | tr -d '[]')
LAST_DATE=""
HAS_NEW=""
for DATE in $DATES_IN_LOG; do
    DATE_SECONDS=$(date -d"$DATE" +%s)
    if (( DATE_SECONDS > BOARD_DATE_SECONDS )); then
        HAS_NEW="yes"
    fi
    if (( DATE_SECONDS <= BOARD_DATE_SECONDS )); then
        LAST_DATE=$DATE
        break
    fi
done

# 如果release.log的版本号大于本地的
new_version_parts=(${NEW_VERSION//./ })
board_ver_parts=(${BOARD_VER//./ })
for ((i=0; i<${#new_version_parts[@]}; i++)); do
    if [ ${#board_ver_parts[@]} -le $i ]; then
        board_ver_parts+=(0)
    fi
    if [ ${new_version_parts[$i]} -gt ${board_ver_parts[$i]} ]; then
        HAS_NEW="yes"
    fi
done
if [[ $* =~ -N ]]; then
    HAS_NEW=yes
fi
if [ -z "$HAS_NEW" ]; then
    echo -e  "${STR_AUTO['version_newest_h']}[${BOARD_VER}]${STR_AUTO['version_newest_l']}"
    exit 0
fi

# 输出是否安装的提示语
clear
echo -e "[${BOARD_VER}] -> \033[32m[${NEW_VERSION}]\033[0m"
echo -e "${STR_AUTO['backup_warn']}"

sed -n "1,/\\[$LAST_DATE\\]/p" $FILE_LOG_SAVE | sed '/\['$LAST_DATE'\]/d'
echo -n "${STR_AUTO['are_u_redy']} "

if [[ $* =~ -y ]] || [[  $* =~ -Y ]]; then
    echo ""
else
    read -p "[Y/n]" CHOICE
    if [[ "$CHOICE" != "y" && "$CHOICE" != "Y" ]]; then
        echo -e "${STR_AUTO['abort']}."
        exit 1
    fi

fi

cd $PATH_PATCH_LIST
run_status "download the package list" wget $PATCH_LIST_URL -O list.gz
run_status "unzip the package list" tar -xvf list.gz
run_status "apt-get update" apt-get update -o Dir::Etc::sourcelist="$TMP_SOURCE_FILE" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"

# 参数1是写着包列表的文件
# 参数2是要输出的信息
# 参数3是要执行的apt命令
package_opt(){
    local LIST_FILE=$1
    local MESSAGE=$2
    local COMMAND=$3
    local TOTAL_PACKAGES=$(wc -l < "$LIST_FILE")
    local COUNT=0

    while read PACKAGE_NAME
    do
        COUNT=$((COUNT+1))
        echo -e "$MESSAGE [ $COUNT / $TOTAL_PACKAGES ] \t $PACKAGE_NAME " 
        apt-get $COMMAND -y -o Dir::Etc::sourcelist="$TMP_SOURCE_FILE" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" $PACKAGE_NAME
    done < "$LIST_FILE"
}


# 删除指定包
file="del-$BOARD_OS_TYPE" 
new_file="del-$BOARD_OS_TYPE-available" 
while IFS= read -r package
do
    if dpkg -l | grep -q "^ii  $package "; then
        echo "$package" >> "$new_file"
    fi
done < "$file"
[[ -f $new_file ]] && package_opt "$new_file" "remove" remove 


# 增加新包
file="add-$BOARD_OS_TYPE" # 替换为你的文件路径
new_file="add-$BOARD_OS_TYPE-available" # 替换为你的新文件路径
while IFS= read -r package
do
    if ! dpkg -l | grep -q "^ii  $package "; then
        echo "$package" >> "$new_file"
    fi
done < "$file"
[[ -f $new_file ]] && package_opt "$new_file" "add" install

# 获取更新，安装
apt-get --just-print upgrade -o Dir::Etc::sourcelist="$TMP_SOURCE_FILE_WPI" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" | grep 'Inst' | cut -d ' ' -f 2 >  $FILE_PACKAGES
package_opt "$FILE_PACKAGES" "update"  install


# 替换新版本号
sed -i "s/^version=.*/version=$NEW_VERSION/" $RELEASE_FILE

# 替换新时间
DATE=$(grep -o '\[[^]]*\]' $FILE_LOG_SAVE | head -n 1 | tr -d '[]')
sed -i "s/^date=.*/date=$DATE/" $RELEASE_FILE

echo_green "\n\n【OK】please reboot"